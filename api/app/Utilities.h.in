/*=========================================================================

  Program:  Alder (CLSA Ultrasound Image Viewer)
  Module:   Utilities.h
  Language: C++

  Author: Patrick Emond <emondpd@mcmaster.ca>
  Author: Dean Inglis <inglisd@mcmaster.ca>

=========================================================================*/
//
// .SECTION Description
// A utilities header to include typedefs, macros, global functions, etc.
//

#ifndef __Utilities_h
#define __Utilities_h

#define ALDER_VERSION_MAJOR @ALDER_VERSION_MAJOR@
#define ALDER_VERSION_MINOR @ALDER_VERSION_MINOR@
#define ALDER_VERSION_PATCH @ALDER_VERSION_PATCH@

#define ALDER_ROOT_DIR "@ALDER_ROOT_DIR@"
#define ALDER_AUX_DIR "@ALDER_AUX_DIR@"
#define ALDER_API_DIR "@ALDER_API_DIR@"
#define ALDER_APP_DIR "@ALDER_APP_DIR@"
#define ALDER_QT_DIR "@ALDER_QT_DIR@"
#define ALDER_VTK_DIR "@ALDER_VTK_DIR@"
#define ALDER_CONFIG_FILE "@ALDER_CONFIG_FILE@"

#define ALDER_SALT_STRING "@ALDER_SALT_STRING@"
#define ALDER_MASTER_PASSWORD ""

//
// This macro is used for sql debug statements in instance methods
// vtkDebugSQLMacro(<< "SQL statement");
//
#define vtkDebugSQLMacro(x) \
   vtkDebugSQLWithObjectMacro(this,x)

#ifdef NDEBUG
# define vtkDebugSQLWithObjectMacro(self, x)
#else
# define vtkDebugSQLWithObjectMacro(self, x)                                  \
  {                                                                           \
  if (self->GetDebugSQL() && vtkObject::GetGlobalWarningDisplay())            \
    {                                                                         \
    vtkOStreamWrapper::EndlType endl;                                         \
    vtkOStreamWrapper::UseEndl(endl);                                         \
    vtkOStrStreamWrapper vtkmsg;                                              \
    vtkmsg << "SQL: In " __FILE__ ", line " << __LINE__ << "\n"               \
           << self->GetClassName() << " (" << self << "): " x  << "\n\n";     \
    vtkOutputWindowDisplayDebugText(vtkmsg.str());                            \
    vtkmsg.rdbuf()->freeze(0);                                                \
    }                                                                         \
  }
#endif

#include <sha.h>
#include <base64.h>

// main function
namespace Alder
{
  inline void hashString( std::string input, std::string &output )
  {
    input += ALDER_SALT_STRING;
    output = "";

    CryptoPP::SHA256 hash;
    CryptoPP::StringSource foo(
      input.c_str(),
      true,
      new CryptoPP::HashFilter( hash,
        new CryptoPP::Base64Encoder(
          new CryptoPP::StringSink( output ) ) ) );
  }
}

#endif // __Utilities_h
