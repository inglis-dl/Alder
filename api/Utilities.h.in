/*=========================================================================

  Program:  Alder (CLSA Medical Image Quality Assessment Tool)
  Module:   Utilities.h
  Language: C++

  Author: Patrick Emond <emondpd@mcmaster.ca>
  Author: Dean Inglis <inglisd@mcmaster.ca>

=========================================================================*/
//
// .SECTION Description
// A utilities header to include typedefs, macros, global functions, etc.
//

#ifndef __Utilities_h
#define __Utilities_h

#define ALDER_VERSION_MAJOR @ALDER_VERSION_MAJOR@
#define ALDER_VERSION_MINOR @ALDER_VERSION_MINOR@
#define ALDER_VERSION_PATCH @ALDER_VERSION_PATCH@

#define ALDER_ROOT_DIR "@ALDER_ROOT_DIR@"
#define ALDER_AUX_DIR "@ALDER_AUX_DIR@"
#define ALDER_API_DIR "@ALDER_API_DIR@"
#define ALDER_APP_DIR "@ALDER_APP_DIR@"
#define ALDER_QT_DIR "@ALDER_QT_DIR@"
#define ALDER_VTK_DIR "@ALDER_VTK_DIR@"
#define ALDER_CONFIG_FILE "@ALDER_CONFIG_FILE@"
#define ALDER_OPAL_SCRIPT "@ALDER_OPAL_SCRIPT@"

#define ALDER_SALT_STRING "@ALDER_SALT_STRING@"

//
// This macro is used for sql debug statements in instance methods
// vtkDebugSQLMacro(<< "SQL statement");
//
#define vtkDebugSQLMacro(x) \
   vtkDebugSQLWithObjectMacro(this,x)

#ifdef NDEBUG
# define vtkDebugSQLWithObjectMacro(self, x)
#else
# define vtkDebugSQLWithObjectMacro(self, x)                                  \
  {                                                                           \
  if (self->GetDebugSQL() && vtkObject::GetGlobalWarningDisplay())            \
    {                                                                         \
    vtkOStreamWrapper::EndlType endl;                                         \
    vtkOStreamWrapper::UseEndl(endl);                                         \
    vtkOStrStreamWrapper vtkmsg;                                              \
    vtkmsg << "SQL: In " __FILE__ ", line " << __LINE__ << "\n"               \
           << self->GetClassName() << " (" << self << "): " x  << "\n\n";     \
    vtkOutputWindowDisplayDebugText(vtkmsg.str());                            \
    vtkmsg.rdbuf()->freeze(0);                                                \
    }                                                                         \
  }
#endif

#include <algorithm>
#include <base64.h>
#include <cctype>
#include <json/reader.h>
#include <sha.h>
#include <sstream>
#include <stdio.h>
#include <time.h>
#include <unistd.h>

/**
 * @addtogroup Alder
 * @{
 */

namespace Alder
{
  class Utilities
  {
  public:
    inline static void hashString( std::string input, std::string &output )
    {
      input += ALDER_SALT_STRING;
      output = "";

      CryptoPP::SHA256 hash;
      CryptoPP::StringSource foo(
        input.c_str(),
        true,
        new CryptoPP::HashFilter( hash,
          new CryptoPP::Base64Encoder(
            new CryptoPP::StringSink( output ) ) ) );
    }

    inline static std::string exec( const char* command )
    {
      FILE* pipe = popen( command, "r" );
      if( !pipe ) return "ERROR";
      char buffer[128];
      std::string result = "";
      while( !feof( pipe ) ) if( fgets( buffer, 128, pipe ) != NULL ) result += buffer;
      pclose( pipe );
      return result;
    } 

    inline static std::string getTime( std::string format )
    {
      char buffer[256];
      time_t rawtime;
      time( &rawtime );
      strftime( buffer, 256, format.c_str(), localtime( &rawtime ) );
      return std::string( buffer );
    }

    inline static std::string toLower( std::string str )
    {
      std::string returnString = str;
      std::transform( str.begin(), str.end(), returnString.begin(), tolower );
      return returnString;
    }

    inline static std::string toUpper( std::string str )
    {
      std::string returnString = str;
      std::transform( str.begin(), str.end(), returnString.begin(), toupper );
      return returnString;
    }

    inline static bool fileExists( std::string filename )
    {
      if( filename.empty() ) return false;
      return access( filename.c_str(), R_OK )  == 0;
    }

    inline static std::string getFileExtension( std::string filename )
    {
      std::string::size_type dot_pos = filename.rfind(".");
      std::string extension = (dot_pos == std::string::npos) ? "" :
        filename.substr( dot_pos );
      return extension;  
    }

    inline static std::string getFilenamePath( std::string filename )
    {
      std::string::size_type slash_pos = filename.rfind("/");
      if( slash_pos != std::string::npos )
      {
        std::string path = filename.substr( 0, slash_pos );
        if( path.size() == 2 && path[1] == ':' )
        {
          return path + '/';
        }
        if( path.size() == 0 )
        {
          return "/";
        }
        return path;
      }
      else
      {
        return "";
      }
    }
    
    inline static std::string getFilenameName( std::string filename )
    {
      std::string::size_type slash_pos = filename.find_last_of("/");
      if( slash_pos != std::string::npos )
      {
        return filename.substr( slash_pos + 1 );
      }
      else
      {
        return filename;
      }
    }
  };  
}

#endif // __Utilities_h
